install.packages("rJava")
library('OpenImageR')
im = readImage('/home/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img/picasso.jpg')
im = readImage('/home/rafael/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img/picasso.jpg')
imGray = rgb_2gray(im)
imEdge = edge_detection(imGray, method = 'Frei_chen', conv_mode = 'same')
figure imEdge
showImage imEdge
imageShow(imEdge)
imEdge = edge_detection(imGray, method = 'Sobel', conv_mode = 'same')
imageShow(imEdge)
library('OpenImageR')
im = readImage('/home/rafael/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img/picasso.jpg')
im = readImage('/home/rafael/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/picasso.jpg')
figure im
showImage ima
showImage im
imageShow(im)
library('OpenImageR')
library(jpeg)
img <- readJPEG('/home/rafael/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/picasso.jpg')
dim(img)[1]
dim(img)[2]
a = img[0:700, 0:576,][,,1]*255
a
mean a
mean(a)
b = img[0:700, 0:576,][,,2]*255
c = img[0:700, 0:576,][,,3]*255
mean(b)
mean(c)
median(a)
median(b)
median(c)
library(jpeg)
img <- readJPEG('/home/rafael/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/red.jpg')
dim(img)[1]
dim(img)[2]
library('OpenImageR')
im = readImage('/home/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img/red.jpg')
im = readImage('/home/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/red.jpg')
im = readImage('/home/rafael/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/red.jpg')
imGray = rgb_2gray(im)
imEdge = edge_detection(imGray, method = 'Frei_chen', conv_mode = 'same')
imageShow(imEdge)
imEdge
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",
sep=",")
wine
install.packages('car')
library('car')
wine[2:6]
> scatterplotMatrix(wine[2:6])
scatterplotMatrix(wine[2:6])
plot(wine$V4, wine$V5)
text(wine$V4, wine$V5, wine$V1, cex=0.7, pos=4, col="red")
plot(wine$V4, wine$V5)
text(wine$V4, wine$V5, wine$V1, cex=0.7, pos=4, col="red")
makeProfilePlot <- function(mylist,names)
{
require(RColorBrewer)
# find out how many variables we want to include
numvariables <- length(mylist)
# choose 'numvariables' random colours
colours <- brewer.pal(numvariables,"Set1")
# find out the minimum and maximum values of the variables:
mymin <- 1e+20
mymax <- 1e-20
for (i in 1:numvariables)
{
vectori <- mylist[[i]]
mini <- min(vectori)
maxi <- max(vectori)
if (mini < mymin) { mymin <- mini }
if (maxi > mymax) { mymax <- maxi }
}
# plot the variables
for (i in 1:numvariables)
{
vectori <- mylist[[i]]
namei <- names[i]
colouri <- colours[i]
if (i == 1) { plot(vectori,col=colouri,type="l",ylim=c(mymin,mymax)) }
else         { points(vectori, col=colouri,type="l")                                     }
lastxval <- length(vectori)
lastyval <- vectori[length(vectori)]
text((lastxval-10),(lastyval),namei,col="black",cex=0.6)
}
}
library(RColorBrewer)
install.package('RColorBrewer')
install.packages('RColorBrewer')
library(RColorBrewer)
names <- c("V2","V3","V4","V5","V6")
mylist <- list(wine$V2,wine$V3,wine$V4,wine$V5,wine$V6)
makeProfilePlot(mylist,names)
sapply(wine[2:14],mean)
sapply(wine[2:14],sd)
q()
library("OpenImageR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
setwd("~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/doc/img")
im = readImage('landscape.jpg')
imGray = rgb_2gray(im)
aH = average_hash(imGray, hash_size = 8, MODE = 'hash')
ah
aH
dH = dhash(imGray, hash_size = 8, MODE = 'hash')
dH
pH = phash(imGray, hash_size = 8, highfreq_factor = 4, MODE = 'hash', resize = 'nearest')
pH
filt = uniform_filter(im, c(4,4), conv_mode = "same")
filt
imageShow(filt)
imageShow(im)
filt = uniform_filter(im, c(1,1), conv_mode = "same")
imageShow(filt)
filt = uniform_filter(im, c(10,10), conv_mode = "same")
imageShow(filt)
library("png", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/doc/graphics/segmentation.R')
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/doc/graphics/segmentation.R')
dim(mandrill)
grid.raster(mandrill)
library("grid")
library("gridExtra")
grid.raster(mandrill)
grid.raster(mandrill[,,3])
mandrill.R = mandrill
mandrill.G = mandrill
mandrill.B = mandrill
mandrill.R[,,2:3] = 0
mandrill.G[,,1]=0
mandrill.G[,,3]=0
mandrill.B[,,1:2]=0
img1 = rasterGrob(mandrill.R)
img2 = rasterGrob(mandrill.G)
img3 = rasterGrob(mandrill.B)
grid.arrange(img1, img2, img3, nrow=1)
img1
mandrill.R
grid.raster(mandrill.R)
grid.raster(mandrill.G)
grid.raster(mandrill.B)
df = data.frame(
red = matrix(mandrill[,,1], ncol=1),
green = matrix(mandrill[,,2], ncol=1),
blue = matrix(mandrill[,,3], ncol=1)
)
K = kmeans(df, 4)
df$label = K$cluster
colors = data.frame(
label = 1:nrow(K$centers),
R = K$centers[,"red"],
G = K$centers[,"green"],
B = K$centers[,"blue"]
)
df$order = 1:nrow(df)
df = merge(df, colors)
df = df[order(df$order),]
df$order = NULL
R = matrix(df$R, nrow=dim(mandrill)[1])
G = matrix(df$G, nrow=dim(mandrill)[1])
B = matrix(df$B, nrow=dim(mandrill)[1])
mandrill.segmented = array(dim=dim(mandrill))
mandrill.segmented[,,1] = R
mandrill.segmented[,,2] = G
mandrill.segmented[,,3] = B
grid.raster(mandrill.segmented)
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/doc/graphics/segmentation.R')
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/doc/graphics/segmentation.R')
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/doc/graphics/segmentation.R')
image = readPNG('landscape.png')
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/doc/graphics/segmentation.R')
k = 5
image = readPNG('landscape.png')
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/doc/graphics/segmentation.R')
