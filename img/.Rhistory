install.packages("rJava")
library(OpenImageR)
install.packages("OpenImageR")
install.packages("tiff")
install.packages("tiff")
install.packages("OpenImageR")
library(OpenImageR)
getwd()
setwd('/home/rafael/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img')
path = "picasso.jpg"
im = readImage(path)
imageShow(im)
edsc = edge_detection(im, method = 'Sobel', conv_mode = 'same')
imageShow(edsc)
r2g = rgb_2gray(im)
imageShow(r2g)
edsc = edge_detection(r2g, method = 'Sobel', conv_mode = 'same')
imageShow(edsc)
edscFreiChen = edge_detection(r2g, method = 'Frei_Chen', conv_mode = 'same')
edscFreiChen = edge_detection(r2g, method = 'Frei_chen', conv_mode = 'same')
imageShow(edscFreiChen)
edscLoG = edge_detection(r2g, method = 'LoG', conv_mode = 'same')
imageShow(edscLoG)
edscPrewitt = edge_detection(r2g, method = 'Prewitt', conv_mode = 'same')
imageShow(edscPrewitt)
edscRobertsCross = edge_detection(r2g, method = 'Roberts_cross', conv_mode = 'same')
imageShow(edscRobertsCross)
edscScharr = edge_detection(r2g, method = 'Scharr', conv_mode = 'same')
imageShow(edscScharr)
imageShow(edscRobertsCross)
imageShow(edscPrewitt)
imageShow(edscLoG)
imageShow(edscFreiChen)
imageShow(edsc)
imageShow(edsc)
edsc
typeof(edsc)
is.matrix(edsc)
library(jpeg)
img <- readJPEG('picasso.jpg')
img[0:700, 0:576][,,1] * 255
img[0:699, 0:575][,,1] * 255
img[0:576, 0:700][,,1] * 255
dim(img)
img[0:700, 0:576] * 255
img[0:576, 0:700] * 255
img[0:576, 0:700,] * 255
img[0:700, 0:576,] * 255
q()
?hist
library(jpeg)
img <- readJPEG('picasso.jpg')
hist(img)
r2g = rgb_2gray(im)
hist(img)
im
img
library('OpenImageR')
HOG(img, cells = 3, orientations = 6)
hist(img)
normalize <- function(x) {x / sqrt(sum(x^2))}
a = HOG(img, cells = 3, orientations = 6)
normalize(a)
table(a)
t = table(a)
size(t)
length(t)
library("entropy")
install.packages("entropy")
library("entropy")
entropy(a, method="ML")
entropy(a, method="MM")
entropy(a, method="Jeffreys")
entropy(a, method="Laplace")
entropy(a, method="SG")
entropy(a, method="minimax")
entropy(a, method="CS")
entropy(a, method="NSB")
entropy(a, method="shrink")
entropy.ChaoSen(a)
entropy.ChaoShen(a)
entropy.empirical(a)
q
quit()
library('OpenImageR')
library('entropy')
im = readImage('picasso.jpg')
entropy.empirical(im)
imGray = rgb_2gray(im)
entropy.empirical(imGray)
histogram = HOG(im, cells = 3, orientations = 6)
entropy.empirical(histogram)
histogram = HOG(imGray, cells = 3, orientations = 6)
entropy.empirical(histogram)
q()
library('OpenImageR')
library('entropy')
im = readImage('picasso.jpg')
histogram = HOG(imGray, cells = 3, orientations = 6)
normalize <- function(x) {x / sqrt(sum(x^2))}
histogramNormalized = normalize(histogram)
histogramNormalized
entropy.empirical(histogramNormalized)
install.packages(FSelector)
library(FSelector)
quit()
