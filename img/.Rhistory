install.packages("rJava")
library(OpenImageR)
install.packages("OpenImageR")
install.packages("tiff")
install.packages("tiff")
install.packages("OpenImageR")
library(OpenImageR)
getwd()
setwd('/home/rafael/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img')
path = "picasso.jpg"
im = readImage(path)
imageShow(im)
edsc = edge_detection(im, method = 'Sobel', conv_mode = 'same')
imageShow(edsc)
r2g = rgb_2gray(im)
imageShow(r2g)
edsc = edge_detection(r2g, method = 'Sobel', conv_mode = 'same')
imageShow(edsc)
edscFreiChen = edge_detection(r2g, method = 'Frei_Chen', conv_mode = 'same')
edscFreiChen = edge_detection(r2g, method = 'Frei_chen', conv_mode = 'same')
imageShow(edscFreiChen)
edscLoG = edge_detection(r2g, method = 'LoG', conv_mode = 'same')
imageShow(edscLoG)
edscPrewitt = edge_detection(r2g, method = 'Prewitt', conv_mode = 'same')
imageShow(edscPrewitt)
edscRobertsCross = edge_detection(r2g, method = 'Roberts_cross', conv_mode = 'same')
imageShow(edscRobertsCross)
edscScharr = edge_detection(r2g, method = 'Scharr', conv_mode = 'same')
imageShow(edscScharr)
imageShow(edscRobertsCross)
imageShow(edscPrewitt)
imageShow(edscLoG)
imageShow(edscFreiChen)
imageShow(edsc)
imageShow(edsc)
edsc
typeof(edsc)
is.matrix(edsc)
library(jpeg)
img <- readJPEG('picasso.jpg')
img[0:700, 0:576][,,1] * 255
img[0:699, 0:575][,,1] * 255
img[0:576, 0:700][,,1] * 255
dim(img)
img[0:700, 0:576] * 255
img[0:576, 0:700] * 255
img[0:576, 0:700,] * 255
img[0:700, 0:576,] * 255
q()
?hist
library(jpeg)
img <- readJPEG('picasso.jpg')
hist(img)
r2g = rgb_2gray(im)
hist(img)
im
img
library('OpenImageR')
HOG(img, cells = 3, orientations = 6)
hist(img)
normalize <- function(x) {x / sqrt(sum(x^2))}
a = HOG(img, cells = 3, orientations = 6)
normalize(a)
table(a)
t = table(a)
size(t)
length(t)
library("entropy")
install.packages("entropy")
library("entropy")
entropy(a, method="ML")
entropy(a, method="MM")
entropy(a, method="Jeffreys")
entropy(a, method="Laplace")
entropy(a, method="SG")
entropy(a, method="minimax")
entropy(a, method="CS")
entropy(a, method="NSB")
entropy(a, method="shrink")
entropy.ChaoSen(a)
entropy.ChaoShen(a)
entropy.empirical(a)
q
quit()
library('OpenImageR')
library('entropy')
im = readImage('picasso.jpg')
entropy.empirical(im)
imGray = rgb_2gray(im)
entropy.empirical(imGray)
histogram = HOG(im, cells = 3, orientations = 6)
entropy.empirical(histogram)
histogram = HOG(imGray, cells = 3, orientations = 6)
entropy.empirical(histogram)
q()
library('OpenImageR')
library('entropy')
im = readImage('picasso.jpg')
histogram = HOG(imGray, cells = 3, orientations = 6)
normalize <- function(x) {x / sqrt(sum(x^2))}
histogramNormalized = normalize(histogram)
histogramNormalized
entropy.empirical(histogramNormalized)
install.packages(FSelector)
library(FSelector)
quit()
quit()
quit()
m <- matrix(0, 20, 20)
m
library('entropy')
entropy.empirical(m)
m <- matrix(1, 20, 20)
entropy.empirical(m)
m
entropy.empirical(m)
entropy.ChaoShen(m)
entropy.Dirichlet(m)
freqs.Dirichlet(m, a = 1/2)
entropy.Dirichlet(m, a=0)
entropy.Dirichlet(m, a=1/2)
entropy.Dirichlet(m, a=1)
entropy.Dirichlet(m, a=1/length(m))
a = c(1,2,3)
a
b = c(6,5,4)
b
rbind(a,b)
mi.Dirichlet(rbind(a,b), a = 1/6Ã 
mi.Dirichlet(rbind(a,b), a = 1/6)
0.5 * chi2indep.Dirichlet(rbind(a,b), a = 1/6)
m = matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,), nrom=10, ncol=10)
m = matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,), nrow=10, ncol=10)
m = matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), nrow=10, ncol=10)
m = matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), nrow=10, ncol=10)
m
entropy.empirical(m)
quit()
library('entropy')
library('OpenImageR')
im = readImage('picasso.jpg')
entropy.empirical(im)
imageShow(im)
imGray = rgb_2gray(im)
entropy.empirical(imGray)
im = readImage('red.jpg')
entropy.empirical(im)
entropy.ChaoShen(im)
entropy(im, method = "ML")
entropy(im, method = "SG")
hist(im)
res <- hist(im)
res
res.counts
res$counts
- sum(res$counts[i] * log2(res$counts[i])
;
sum(res$counts[i] * log2(res$counts[i])
;
sum(res$counts[i] * log2(res$counts[i]);
res$counts.size
res$counts.length
length(res$counts)
sum((res$counts[0] * log2(res$counts[0]) : (res$counts[length(res$counts)] * log2(res$counts[length(res$counts)]));
sum((res$counts[0] * log2(res$counts[0]) : (res$counts[length(res$counts)] * log2(res$counts[length(res$counts)]))
sum((res$counts[0] * log2(res$counts[0])) : (res$counts[length(res$counts)] * log2(res$counts[length(res$counts)])))
res$counts[length(res$counts)]
res$counts[0]
res$counts[1]
sum((res$counts[1] * log2(res$counts[1])) : (res$counts[length(res$counts)] * log2(res$counts[length(res$counts)])))
sum((-res$counts[1] * log2(res$counts[1])) : (-res$counts[length(res$counts)] * log2(res$counts[length(res$counts)])))
res
sum((-res$breaks[1] * log2(res$breaks[1])) : (-res$breaks[length(res$breaks)] * log2(res$breaks[length(res$breaks)])))
sum((-res$mids[1] * log2(res$mids[1])) : (-res$mids[length(res$mids)] * log2(res$mids[length(res$mids)])))
im
imageShow(im-
imageShow(im)
res
sum((-res$mids[1] * log2(res$mids[1])) : (-res$mids[length(res$mids)] * log2(res$mids[length(res$mids)])))
sum((-res$density[1] * log2(res$density[1])) : (-res$density[length(res$density)] * log2(res$density[length(res$density)])))
res$density = res$counts/sum(res$counts) * 100
sum((-res$density[1] * log2(res$density[1])) : (-res$density[length(res$density)] * log2(res$density[length(res$density)])))
sum((-res$mids[1] * log2(res$mids[1])) : (-res$mids[length(res$mids)] * log2(res$mids[length(res$mids)])))
binsx = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255)
m = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,806400,1800,0,1800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
sum((-m[1] * log2(m[1])) : (-m[length(m)] * log2(m[length(m)])))
sum((m[1] * log2(m[1])) : (m[length(m)] * log2(m[length(m)])))
m[1]
m[length(m)]
log2(0)
sum((m[1] * log2(m[1] + 1e-10)) : (m[length(m)] * log2(m[length(m + 1e-10)])))
log2(0 + 1e-10)
-sum(m * log2(m + 1e-10))
sum(-res$mids[1] * log2(res$mids[1]))
sum(-res$breaks[1] * log2(res$breaks[1]))
sum(-res$counts[1] * log2(res$counts[1]))
res
sum(-res$density * log2(res$density + 1e-10))
sum(-res$mids * log2(res$mids + 1e-10))
sum(-res$breaks * log2(res$breaks + 1e-10))
sum(-res$counts * log2(res$counts + 1e-10))
-sum(res$counts * log2(res$counts + 1e-10))
-sum(m * log2(m + 1e-10))
806400 * log2(806400) + 1800 * log2(1800) + 1800 * log2(1800)
806400 * log(806400) + 1800 * log(1800) + 1800 * log(1800)
-806400 * log(806400) - 1800 * log(1800) - 1800 * log(1800)
0 * log2(0 + 1e-10)
0.3319 * log2(0.3319) + 0.0007 * log2(0.0007) + 0.0007 * log2(0.0007)
m <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.3319,0.0007,0,0.0007,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
-sum(m * log2(m + 1e-10))
dim(im)
norm = res$counts / (900 * 900)
norm
-sum(norm * log2(norm + 1e-10))
norm = res$density / (900 * 900)
-sum(norm * log2(norm + 1e-10))
norm = res$mids / (900 * 900)
-sum(norm * log2(norm + 1e-10))
norm = m / (900 * 900)
-sum(norm * log2(norm + 1e-10))
m
hist(im-
hist(im)
hist(im, breaks=6)
hist(im, breaks=256)
res = hist(im, breaks=256)
res
-sum(res$breaks * log2(res$breaks + 1e-10))
-sum(res$mids * log2(res$mids + 1e-10))
-sum(res$density * log2(res$density + 1e-10))
-sum(res$counts * log2(res$counts + 1e-10))
bins = c(1:256)
bins
bins = c(0:256)
res = hist(im, breaks=bins)
-sum(res$counts * log2(res$counts + 1e-10))
-sum(res$density * log2(res$density + 1e-10))
-sum(res$mids * log2(res$mids + 1e-10))
-sum(res$breaks * log2(res$breaks + 1e-10))
entropy.MillerMadow(imGray)
imGray
imageShow(imGray)
im <-readImage('red.jpg')
hist(im)
res = hist(im)
entropy.MillerMadow(im)
-sum(res$breaks * log2(res$breaks + 1e-10))
-sum(res$mids * log2(res$mids + 1e-10))
-sum(res$density * log2(res$density + 1e-10))
-sum(res$counts * log2(res$counts + 1e-10))
res
res = hist(im, breaks=)
-sum(res$counts * log2(res$counts + 1e-10))
-sum(res$density * log2(res$density + 1e-10))
-sum(res$mids * log2(res$mids + 1e-10))
-sum(res$breaks * log2(res$breaks + 1e-10))
res = hist(im, breaks=256)
-sum(res$breaks * log2(res$breaks + 1e-10))
-sum(res$mids * log2(res$mids + 1e-10))
-sum(res$density * log2(res$density + 1e-10))
-sum(res$counts * log2(res$counts + 1e-10))
quit()
