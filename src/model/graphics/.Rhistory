install.packages("rJava")
library('OpenImageR')
im = readImage('/home/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img/picasso.jpg')
im = readImage('/home/rafael/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img/picasso.jpg')
imGray = rgb_2gray(im)
imEdge = edge_detection(imGray, method = 'Frei_chen', conv_mode = 'same')
figure imEdge
showImage imEdge
imageShow(imEdge)
imEdge = edge_detection(imGray, method = 'Sobel', conv_mode = 'same')
imageShow(imEdge)
library('OpenImageR')
im = readImage('/home/rafael/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img/picasso.jpg')
im = readImage('/home/rafael/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/picasso.jpg')
figure im
showImage ima
showImage im
imageShow(im)
library('OpenImageR')
library(jpeg)
img <- readJPEG('/home/rafael/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/picasso.jpg')
dim(img)[1]
dim(img)[2]
a = img[0:700, 0:576,][,,1]*255
a
mean a
mean(a)
b = img[0:700, 0:576,][,,2]*255
c = img[0:700, 0:576,][,,3]*255
mean(b)
mean(c)
median(a)
median(b)
median(c)
library(jpeg)
img <- readJPEG('/home/rafael/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/red.jpg')
dim(img)[1]
dim(img)[2]
library('OpenImageR')
im = readImage('/home/Dropbox/MasterInformatica/Eerste Jaar/Onderzoeksproject 1/ArtToMusic/img/red.jpg')
im = readImage('/home/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/red.jpg')
im = readImage('/home/rafael/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/img/red.jpg')
imGray = rgb_2gray(im)
imEdge = edge_detection(imGray, method = 'Frei_chen', conv_mode = 'same')
imageShow(imEdge)
imEdge
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",
sep=",")
wine
install.packages('car')
library('car')
wine[2:6]
> scatterplotMatrix(wine[2:6])
scatterplotMatrix(wine[2:6])
plot(wine$V4, wine$V5)
text(wine$V4, wine$V5, wine$V1, cex=0.7, pos=4, col="red")
plot(wine$V4, wine$V5)
text(wine$V4, wine$V5, wine$V1, cex=0.7, pos=4, col="red")
makeProfilePlot <- function(mylist,names)
{
require(RColorBrewer)
# find out how many variables we want to include
numvariables <- length(mylist)
# choose 'numvariables' random colours
colours <- brewer.pal(numvariables,"Set1")
# find out the minimum and maximum values of the variables:
mymin <- 1e+20
mymax <- 1e-20
for (i in 1:numvariables)
{
vectori <- mylist[[i]]
mini <- min(vectori)
maxi <- max(vectori)
if (mini < mymin) { mymin <- mini }
if (maxi > mymax) { mymax <- maxi }
}
# plot the variables
for (i in 1:numvariables)
{
vectori <- mylist[[i]]
namei <- names[i]
colouri <- colours[i]
if (i == 1) { plot(vectori,col=colouri,type="l",ylim=c(mymin,mymax)) }
else         { points(vectori, col=colouri,type="l")                                     }
lastxval <- length(vectori)
lastyval <- vectori[length(vectori)]
text((lastxval-10),(lastyval),namei,col="black",cex=0.6)
}
}
library(RColorBrewer)
install.package('RColorBrewer')
install.packages('RColorBrewer')
library(RColorBrewer)
names <- c("V2","V3","V4","V5","V6")
mylist <- list(wine$V2,wine$V3,wine$V4,wine$V5,wine$V6)
makeProfilePlot(mylist,names)
sapply(wine[2:14],mean)
sapply(wine[2:14],sd)
q()
k = 2
setwd("~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics")
library("png", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
image <- readPNG('../../../img/color/landscape.png')
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
library("entropy", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
freqs.empirical(image.segmented)
entropy
entropy.empirical(image.segmented)
k = 3
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
entropy.empirical(image.segmented)
k = 4
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
entropy.empirical(image.segmented)
k = 1
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
entropy.empirical(image.segmented)
image <- readPNG('../../../img/color/picasso.png')
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
entropy.empirical(image.segmented)
k = 2
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
entropy.empirical(image.segmented)
k = 3
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
entropy.empirical(image.segmented)
entropy(image.segmented, method = "MM")
entropy.ChaoShen(image.segmented)
k = 4
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
k = 5
source('~/Dropbox/MasterInformatica/EersteJaar/Onderzoeksproject1/ArtToMusic/src/model/graphics/segmentation.R')
library("OpenImageR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
imGray = rgb_2gray(image)
imageShow(imGray)
imGray
image
install.packages("RWeka")
cl1 <- SimpleKMeans(iris[, -5], Weka_control(N = 3))
library('RWeka')
install.packages("RWekajars")
library('RWeka')
library('RWeka')
library('RWeka')
cl1 <- SimpleKMeans(iris[, -5], Weka_control(N = 3))
cl1
table(predict(cl1), iris$Species)
install.packages(c("digest", "jsonlite", "OpenImageR", "pbkrtest", "Rcpp", "RcppArmadillo", "RcppEigen", "shiny", "SparseM"))
cl2 <- XMeans(iris[, -5],
c("-L", 3, "-H", 7, "-use-kdtree",
"-K", "weka.core.neighboursearch.KDTree -P"))
library("RWekajars", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
cl2 <- XMeans(iris[, -5],
c("-L", 3, "-H", 7, "-use-kdtree",
"-K", "weka.core.neighboursearch.KDTree -P"))
WPM("load-package", "XMeans")
cl2 <- XMeans(iris[, -5],
c("-L", 3, "-H", 7, "-use-kdtree",
"-K", "weka.core.neighboursearch.KDTree -P"))
WPM("install-package", "XMeans")
cl2 <- XMeans(iris[, -5],
c("-L", 3, "-H", 7, "-use-kdtree",
"-K", "weka.core.neighboursearch.KDTree -P"))
cl2
table(predict(cl2), iris$Species)
cl2 <- XMeans(image)
cl2
cl2$clusterer
cl2$clusterer$`numberOfClusters()`
cl2$clusterer.numberOfClusters()Âµ
cl2$clusterer.numberOfClusters()
cl2.getClusterCenters()
cl2$clusterer$`numberOfClusters()`
numberOfClusters()
cl2$class_ids
cl2
predict(cl2)
lenght(unique(predict(cl2)))
length(unique(predict(cl2)))
length(unique(cl2$class_ids))
n <- length(unique(cl2$class_ids))
n
n <- length(unique(cl2$class_ids))[1]
n
